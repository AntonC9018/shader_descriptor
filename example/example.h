// Warning: This file has been autogenerated by the tool!
#include <glm/glm.hpp>
#include <glad/glad.h>
struct Stuff
{
    glm::float32 fuu;
    glm::vec3 bag;
    glm::vec4 fee;
    glm::mat4 too;
};
struct Thing
{
    glm::vec3 test;
    glm::vec2 foo;
    glm::mat4 bar;
};
struct Stuff_Block
{
    GLuint id;
    inline void create()
    {
        glGenBuffers(1, &id);
        glBindBuffer(GL_UNIFORM_BUFFER, id);
        glBufferData(GL_UNIFORM_BUFFER, 112, NULL, GL_STATIC_DRAW);
    }
    inline void bind()
    {
        glBindBuffer(GL_UNIFORM_BUFFER, id);
    }
    inline void data(void* data)
    {
        glBufferData(GL_UNIFORM_BUFFER, 112, data, GL_STATIC_DRAW);
    }
    const GLuint fuu_offset = 0;
    const GLuint bag_offset = 8;
    const GLuint fee_offset = 24;
    const GLuint too_offset = 44;
    inline void fuu(glm::float32* fuu)
    {
        glBufferSubData(GL_UNIFORM_BUFFER, fuu_offset, 112, fuu);
    }
    inline void bag(glm::vec3* bag)
    {
        glBufferSubData(GL_UNIFORM_BUFFER, bag_offset, 112, bag);
    }
    inline void fee(glm::vec4* fee)
    {
        glBufferSubData(GL_UNIFORM_BUFFER, fee_offset, 112, fee);
    }
    inline void too(glm::mat4* too)
    {
        glBufferSubData(GL_UNIFORM_BUFFER, too_offset, 112, too);
    }
};
struct Example_Program
{
    GLuint id;
    inline void use()
    {
        glUseProgram(id);
    }
    GLint foo_location;
    GLint bar_location;
    GLint baz_location;
    GLint thing_test_location;
    GLint thing_foo_location;
    GLint thing_bar_location;
    inline void foo(glm::vec3 foo)
    {
        glUniform3fv(foo_location, 1, (float*)&foo);
    }
    inline void bar(glm::float32 bar)
    {
        glUniform1f(bar_location, bar);
    }
    inline void baz(glm::mat4 baz)
    {
        glUniformMatrix4fv(baz_location, 1, GL_FALSE, (float*)&baz);
    }
    inline void thing(Thing thing)
    {
        glUniform3fv(thing_test_location, 1, (float*)&thing.test);
        glUniform2fv(thing_foo_location, 1, (float*)&thing.foo);
        glUniformMatrix4fv(thing_bar_location, 1, GL_FALSE, (float*)&thing.bar);
    }
    inline void query_locations()
    {
        foo_location = glGetUniformLocation(id, "foo");
        bar_location = glGetUniformLocation(id, "bar");
        baz_location = glGetUniformLocation(id, "baz");
        thing_test_location = glGetUniformLocation(id, "thing.test");
        thing_foo_location = glGetUniformLocation(id, "thing.foo");
        thing_bar_location = glGetUniformLocation(id, "thing.bar");
    }
    inline void uniforms(glm::vec3 foo_v, glm::float32 bar_v, glm::mat4 baz_v, Thing thing_v)
    {
        foo(foo_v);
        bar(bar_v);
        baz(baz_v);
        thing(thing_v);
    }
};
